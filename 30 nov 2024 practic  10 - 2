(defun Fun (g h) #'(lambda (X) (if (null X) nil 
                                     (if (null (cdr X)) 
                                     (cons (funcall g (car X)) nil)
                                         (cons (funcall g (car X)) (cons (funcall h (cadr X)) (funcall (Fun g h)(cddr X))))))))


(defun Fun1 (g h) #'(lambda (X) (if (null X) nil 
                                    (cons (funcall g (car X))  (funcall (Fun1 h g )(cdr X))))))

                                          
(print (funcall (Fun '1+ '1-) '(1 1 1 1 1)))

(print (funcall (Fun1 '1+ '1-) '(2 2 2 2 2)))







(defun Fun (g) #'(lambda (x) (if (= x 0) (funcall g 0)
                                     (funcall g (funcall (Fun g )(1- x))))))


(print (funcall (Fun '1+) 4))




(defun G (n h) #'(lambda (L) (if (null L) nil
                                  (cons (+ n (funcall h (car L)))
                                        (funcall (G n h)(cdr L))))))

(print (funcall (G 3 (lambda (x)(* x 2))) '( 1 2 3 4)))
